#!/usr/bin/perl

# <!--

use strict;
use warnings;

use CGI;

use Data::Dumper;

use domain::Post;
use domain::Reply;
use repository::PostRepository;
use repository::ReplyRepository;
use types::Result;
use types::WithID;

use components::Form;

use view::placeholder;

local $Data::Dumper::Terse = 1;

###########################################################3

sub reply_element {
  my %reply_with_id = %{$_};
  my %reply = WithID::unwrap(\%reply_with_id);

  return <<EOF
<li>
  <h4>${\( Reply::author(\%reply) )}</h4>
  <p>${\( Reply::content(\%reply) )}</p>
</li>
EOF
;
}

&placeholder::apply("post", sub {
  my $id = $_[0]->param("id");

  my %maybe_post = &PostRepository::get_by_id($id);
  my %post_with_id = Result::unprotect(\%maybe_post) or return "Could not find the post";

  my %post = WithID::unwrap(\%post_with_id);

  my @replies = reverse(&ReplyRepository::latest_by_post_id($id, 100));

  return <<EOF
<!-- -->
  <article class="article">
    <section>
      <h2 class="article__title">
        ${\(Post::title(\%post))}
      </h2>
      <span class="article__author">
        Posted by ${\(Post::author(\%post))}ãƒ»
        Post number #$id
      </span>
    </section>
    <section>
      ${\(Post::content(\%post))}
    </section>
  </article>
  <hr>
  <section>
    <h3>Comments</h3>
    ${\( Form::render(
      "create-new-reply?post=$id",
      ({author => "Author"}, {content => "Content"}, {__post_id => $id})
    ))}
    <ol>
      ${\( join("", map(reply_element, @replies)) )}
    </ol>
  </section>
<!--
EOF
;})

# vim set ft=html: -->
